{"version":3,"sources":["../src/any.ts","../src/array.ts","../src/boolean.ts","../src/errors.ts","../src/index.ts","../src/number.ts","../src/object.ts","../src/ok.ts","../src/string.ts"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["import { ValidationRuntimeError } from './errors';\n\nexport interface ValidationErrorObject {\n  [key: string]: ValidationError;\n}\n\nexport type ValidationError = string | ValidationErrorObject;\n\ninterface ResultValid {\n  valid: true;\n  error: null;\n  validationError: null;\n}\n\ninterface ResultInvalidBase {\n  valid: false;\n  validationError: ValidationRuntimeError;\n}\n\ninterface ResultInvalidPrimitive extends ResultInvalidBase {\n  error: string;\n}\n\ninterface ResultInvalidObject extends ResultInvalidBase {\n  error: ValidationErrorObject;\n}\n\ntype ResultInvalid = ResultInvalidPrimitive | ResultInvalidObject;\n\nexport type Result = ResultValid | ResultInvalid;\n\ninterface TestContext<Parent, Root> {\n  parent: Parent;\n  root: Root;\n  path: string[];\n}\n\ntype TestFnResult = OKAny | string | false | null | undefined | void;\n\ntype SyncTestFn<Input, Parent, Root> = (\n  val: Input,\n  context: TestContext<Parent, Root>\n) => TestFnResult;\n\ntype AsyncTestFn<Input, Parent, Root> = (\n  val: Input,\n  context: TestContext<Parent, Root>\n) => Promise<TestFnResult>;\n\ntype TestFn<Input, Parent, Root> =\n  | SyncTestFn<Input, Parent, Root>\n  | AsyncTestFn<Input, Parent, Root>;\n\ninterface Test<Input, Parent, Root> {\n  testFn: TestFn<Input, Parent, Root>;\n  skipIfNull?: boolean;\n}\n\nexport type TransformFn<Input, Parent, Root> = (\n  val: Input,\n  context: TestContext<Parent, Root>\n) => any;\n\nfunction checkNullish(value: unknown) {\n  // null, undefined, empty string all considered nullish\n  return value === null || value === undefined || (value as string) === '';\n}\n\nfunction isString(val: any): val is string {\n  return typeof val === 'string';\n}\n\nclass OKAny<Input = unknown, Parent = unknown, Root = unknown> {\n  /* Instance keeping track of stuff */\n  private isOptional = false;\n  private requiredMessage = 'Required';\n\n  protected tests: Test<Input, Parent, Root>[] = [];\n\n  protected transforms: TransformFn<Input, Parent, Root>[] = [];\n\n  // @internal\n  public __parent: Parent | undefined;\n  // @internal\n  public __root: Root | undefined;\n  // @internal\n  public __path: string[] = [];\n\n  // No validation message, because any excepts anything!\n  public constructor() {}\n\n  /* Internal */\n\n  protected error(\n    msg: string,\n    validationError?: ValidationRuntimeError\n  ): ResultInvalidPrimitive;\n  protected error(\n    msg: ValidationErrorObject,\n    validationError?: ValidationRuntimeError\n  ): ResultInvalidObject;\n  protected error(\n    msg: (string | null)[],\n    validationError?: ValidationRuntimeError\n  ): ResultInvalidObject;\n  protected error(\n    msg: (ValidationErrorObject | null)[],\n    validationError?: ValidationRuntimeError\n  ): ResultInvalidObject;\n  protected error(\n    msg:\n      | string\n      | ValidationErrorObject\n      | (string | null)[]\n      | (ValidationErrorObject | null)[],\n    validationError?: ValidationRuntimeError\n  ) {\n    return {\n      valid: false,\n      error: msg,\n      validationError: validationError || null,\n    };\n  }\n\n  protected success(): ResultValid {\n    return { valid: true, error: null, validationError: null };\n  }\n\n  protected getContext(): TestContext<Parent, Root> {\n    const parent = this.__parent as Parent;\n    const root = this.__root as Root;\n    const path = this.__path;\n    return { parent, root, path };\n  }\n\n  // If the predicate returns true, the test passes, and the value is ok\n  // if it returns false, the error message will be returned\n  // These tests will be skipped if the value is null and field is marked\n  // optional, because it doesn't make sense to apply them to a null value\n  protected makeAddTest = <T = unknown>() => (\n    predicate: (v: T) => boolean,\n    msg: string\n  ) => {\n    const testFn = (val: Input) => (predicate(val as any) ? null : msg);\n    this.tests.push({ testFn, skipIfNull: true });\n  };\n\n  /**\n   * Build schema\n   */\n\n  public optional() {\n    this.isOptional = true;\n    return this;\n  }\n\n  public transform(transformFn: TransformFn<Input, Parent, Root>) {\n    this.transforms.push(transformFn);\n    return this;\n  }\n\n  public test(testFn: TestFn<Input, Parent, Root>): OKAny<Input, Parent, Root> {\n    this.tests.push({ testFn });\n    return this;\n  }\n\n  /**\n   * @param msg Error message if field is empty (empty string, null, undefined)\n   */\n  public required(msg?: string) {\n    if (msg) {\n      this.requiredMessage = msg;\n    }\n    return this;\n  }\n\n  /**\n   * Call after schema is defined\n   */\n\n  public cast(input: Input) {\n    const context = this.getContext();\n    return this.transforms.reduce(\n      (prevValue, fn) => fn(prevValue, context),\n      input\n    );\n  }\n\n  private handleValidationError(err: any) {\n    // An error thrown by use (ex: impossible cast request)\n    if (err instanceof ValidationRuntimeError) {\n      return this.error(err.message, err);\n    } else if (err && err.message) {\n      // Unknown error\n      const runtimeError = new ValidationRuntimeError({\n        message: err.message,\n        originalError: err,\n      });\n      return this.error('Invalid', runtimeError);\n    } else {\n      // Non error was thrown\n      const runtimeError = new ValidationRuntimeError({\n        message: 'Error',\n        originalError: err,\n      });\n      return this.error('Invalid', runtimeError);\n    }\n  }\n\n  public validate(input: Input): Result {\n    try {\n      const value = this.cast(input);\n\n      const isNullish = checkNullish(value);\n      if (isNullish && !this.isOptional) {\n        return this.error(this.requiredMessage);\n      }\n\n      const context = this.getContext();\n      for (const { testFn, skipIfNull } of this.tests) {\n        if (isNullish && skipIfNull) {\n          continue;\n        }\n        const res = testFn(value, context);\n        if (res instanceof Promise)\n          return this.error(\n            'Cannot run async test in validate, use validateAsync'\n          );\n        else if (res instanceof OKAny) return res.validate(value);\n        else if (isString(res)) return this.error(res);\n      }\n\n      return this.success();\n    } catch (err) {\n      return this.handleValidationError(err);\n    }\n  }\n\n  public async validateAsync(input: Input): Promise<Result> {\n    try {\n      const value = this.cast(input);\n\n      const isNullish = checkNullish(value);\n      if (isNullish && !this.isOptional) {\n        return this.error(this.requiredMessage);\n      }\n\n      const context = this.getContext();\n      const testResults = await Promise.all(\n        this.tests.map(async ({ testFn, skipIfNull }) => {\n          if (isNullish && skipIfNull) {\n            return null;\n          }\n          const res = await testFn(value, context);\n          if (res instanceof OKAny)\n            return res.validateAsync(value).then(r => r.error);\n          else if (isString(res)) return res;\n          else return null;\n        })\n      );\n      const firstError = testResults.filter(isString)[0];\n      if (firstError) return this.error(firstError);\n      else return this.success();\n    } catch (err) {\n      return this.handleValidationError(err);\n    }\n  }\n}\n\nexport default OKAny;\n","import OKAny, { Result } from './any';\nimport { ValidationRuntimeError } from './errors';\n\nclass OKArray<Input, Parent, Root> extends OKAny<Input, Parent, Root> {\n  private shape: OKAny;\n  private parseErrorMsg = 'Must be an array';\n\n  public constructor(shape: OKAny, msg?: string) {\n    super();\n    this.shape = shape;\n    if (msg) this.parseErrorMsg = msg;\n    this.addTest(v => Array.isArray(v), this.parseErrorMsg);\n  }\n\n  private addTest = this.makeAddTest<unknown[]>();\n\n  private setContext(input: Input, ndx: number) {\n    // If input in null return immediately\n    if (!input) return;\n    this.shape.__parent = (input as unknown) as Parent;\n    // If this already has a root, pass in that one\n    this.shape.__root = this.__root || ((input as unknown) as Root);\n    this.shape.__path = this.__path.concat(String(ndx));\n  }\n\n  /* Call after schema is defined */\n\n  public validate(input: Input): Result {\n    // Generic validation\n    const superRes = super.validate(input);\n    if (!superRes.valid) return superRes;\n\n    const errors = ((input as unknown) as any[]).map((el, ndx) => {\n      this.setContext(input, ndx);\n      return this.shape.validate(el);\n    });\n\n    const foundError = errors.some(e => !e.valid);\n    // typescript cannot comprehend that they are all of the same type\n    if (foundError) return this.error(errors.map(e => e.error) as any[]);\n\n    return this.success();\n  }\n\n  public async validateAsync(input: Input): Promise<Result> {\n    // Generic validation\n    const superRes = await super.validateAsync(input);\n    if (!superRes.valid) return superRes;\n\n    const errors = await Promise.all(\n      ((input as unknown) as any[]).map((el, ndx) => {\n        this.setContext(input, ndx);\n        return this.shape.validateAsync(el);\n      })\n    );\n\n    const foundError = errors.some(e => !e.valid);\n    // typescript cannot comprehend that they are all of the same type\n    if (foundError) return this.error(errors.map(e => e.error) as any[]);\n\n    return this.success();\n  }\n\n  // Override cast behavior so that all elements get cast\n  public cast(input: Input) {\n    // If we are trying to cast something that is not an array give up\n    if (!Array.isArray(input)) {\n      throw new ValidationRuntimeError({\n        message: this.parseErrorMsg,\n        originalError: new Error(`Cannot cast ${typeof input} to array`),\n      });\n    }\n    return (input.map(el => this.shape.cast(el)) as unknown) as Input;\n  }\n\n  public length(len: number, msg?: string) {\n    this.addTest(v => v.length === len, msg || `Must have length ${len}`);\n    return this;\n  }\n\n  public min(min: number, msg?: string) {\n    this.addTest(\n      v => v.length >= min,\n      msg || `Must have length greater than or equal to ${min}`\n    );\n    return this;\n  }\n\n  public max(max: number, msg?: string) {\n    this.addTest(\n      v => v.length <= max,\n      msg || `Must have length less than or equal to ${max}`\n    );\n    return this;\n  }\n}\n\nexport default OKArray;\n","import OKAny from './any';\n\nconst parseBoolean = (val: unknown) => {\n  if (typeof val === 'string') {\n    // For strings, any string of spaces is considered empty\n    const isEmpty = val.trim() === '';\n    if (isEmpty) return null;\n    // If it isn't empty, check if it is the string true or false\n    else if (val === 'true') return true;\n    else if (val === 'false') return false;\n    else return val;\n  }\n  // Everything else is returned directly\n  return val;\n};\n\nclass OKBoolean<Input, Parent, Root> extends OKAny<Input, Parent, Root> {\n  public constructor(msg?: string) {\n    super();\n    this.transform(parseBoolean);\n    this.addTest(v => typeof v === 'boolean', msg || 'Must be a boolean');\n  }\n\n  private addTest = this.makeAddTest<boolean>();\n}\n\nexport default OKBoolean;\n","interface ValidationRuntimeErrorParams {\n  message: string;\n  originalError: Error;\n}\n\nexport class ValidationRuntimeError extends Error {\n  public originalError: Error;\n\n  public constructor(params: ValidationRuntimeErrorParams) {\n    super();\n    this.message = params.message;\n    this.originalError = params.originalError;\n  }\n}\n","import ok from './ok';\n\nexport default ok;\n","import OKAny, { TransformFn } from './any';\n\nconst parseNumber = (val: unknown) => {\n  if (typeof val === 'string') {\n    // For strings, any string of spaces is considered empty\n    const isEmpty = val.trim() === '';\n    if (isEmpty) return null;\n    // If it isn't empty, it is parsed with Number\n    else return Number(val);\n  }\n  // Numbers, null, undefined are returned directly\n  if (typeof val === 'number' || val === null || val === undefined) return val;\n  // Everything else is considered not a number\n  return NaN;\n};\n\nclass OKNumber<Input, Parent, Root> extends OKAny<Input, Parent, Root> {\n  public constructor(msg?: string) {\n    super();\n    this.transform(parseNumber);\n    this.addTest(\n      v => typeof v === 'number' && !Number.isNaN(v),\n      msg || 'Must be a number'\n    );\n  }\n\n  private addTest = this.makeAddTest<number>();\n\n  public min(min: number, msg?: string) {\n    this.addTest(\n      v => v >= min,\n      msg || `Must be greater than or equal to ${min}`\n    );\n    return this;\n  }\n\n  public max(max: number, msg?: string) {\n    this.addTest(v => v <= max, msg || `Must be less than or equal to ${max}`);\n    return this;\n  }\n\n  public lessThan(x: number, msg?: string) {\n    this.addTest(v => v < x, msg || `Must be less than ${x}`);\n    return this;\n  }\n\n  public moreThan(x: number, msg?: string) {\n    this.addTest(v => v > x, msg || `Must be greater than ${x}`);\n    return this;\n  }\n\n  public positive(msg?: string) {\n    this.addTest(v => v > 0, msg || `Must be positive`);\n    return this;\n  }\n\n  public negative(msg?: string) {\n    this.addTest(v => v < 0, msg || `Must be negative`);\n    return this;\n  }\n\n  public integer(msg?: string) {\n    this.addTest(v => Number.isInteger(v), msg || 'Must be an integer');\n    return this;\n  }\n\n  public transform(transformFn: TransformFn<Input, Parent, Root>) {\n    this.transforms.push(transformFn);\n    return this;\n  }\n}\n\nexport default OKNumber;\n","import OKAny, { ValidationError, Result } from './any';\nimport { ValidationRuntimeError } from './errors';\n\nexport interface Shape<Input> {\n  [key: string]: OKAny<Input>;\n}\n\ninterface UnknownObj {\n  [key: string]: unknown;\n}\n\nfunction isObject(v: unknown) {\n  return typeof v === 'object' && v !== null && !Array.isArray(v);\n}\n\nclass OKObject<Input, Parent, Root> extends OKAny<Input, Parent, Root> {\n  private shape: Shape<Input>;\n  private parseErrorMsg = 'Must be an object';\n\n  public constructor(shape: Shape<Input>, msg?: string) {\n    super();\n    this.shape = shape;\n    if (msg) this.parseErrorMsg = msg;\n    this.addTest(isObject, this.parseErrorMsg);\n  }\n\n  private addTest = this.makeAddTest<{}>();\n\n  // Returns list of shape, with child OK's populated with parent + root\n  private iterateShape(input: Input) {\n    // If input in null return immediately\n    if (!input) return [];\n    return Object.keys(this.shape).map(key => {\n      const ok = this.shape[key];\n      const val: any = (input as UnknownObj)[key];\n      return { ok, val, key };\n    });\n  }\n\n  private setContext(input: Input) {\n    // If input in null return immediately\n    if (!input) return;\n    Object.keys(this.shape).forEach(key => {\n      const ok = this.shape[key];\n      ok.__parent = (input as unknown) as Parent;\n      // If this already has a root, pass in that one\n      ok.__root = this.__root || ((input as unknown) as Root);\n      ok.__path = this.__path.concat(key);\n    });\n  }\n\n  /* Call after schema is defined */\n\n  public validate(input: Input): Result {\n    this.setContext(input);\n\n    // Generic validation\n    const superRes = super.validate(input);\n    if (!superRes.valid) return superRes;\n\n    // Each key\n    let foundError = false;\n    const error: ValidationError = {};\n    for (const { ok, val, key } of this.iterateShape(input)) {\n      const res = ok.validate(val);\n      if (!res.valid) {\n        foundError = true;\n        error[key] = res.error;\n      }\n    }\n\n    if (foundError) return this.error(error);\n\n    return this.success();\n  }\n\n  public async validateAsync(input: Input): Promise<Result> {\n    this.setContext(input);\n\n    // Generic validation\n    const superRes = await super.validateAsync(input);\n    if (!superRes.valid) return superRes;\n\n    // Each key\n    let foundError = false;\n    const error: ValidationError = {};\n    await Promise.all(\n      this.iterateShape(input).map(async ({ ok, val, key }) => {\n        const res = await ok.validateAsync(val);\n        if (!res.valid) {\n          foundError = true;\n          error[key] = res.error;\n        }\n      })\n    );\n\n    if (foundError) return this.error(error);\n\n    return this.success();\n  }\n\n  // Override cast behavior so that children get cast\n  public cast(input: Input) {\n    // If we are trying to cast something that is not an object give up\n    if (!isObject(input)) {\n      throw new ValidationRuntimeError({\n        message: this.parseErrorMsg,\n        originalError: new Error(`Cannot cast ${typeof input} to object`),\n      });\n    }\n    const newInput: UnknownObj = {};\n    for (const { ok, val, key } of this.iterateShape(input)) {\n      newInput[key] = ok.cast(val);\n    }\n    const context = this.getContext();\n    return this.transforms.reduce(\n      (prevValue, fn) => fn(prevValue, context),\n      newInput as Input\n    );\n  }\n}\n\nexport default OKObject;\n","import OKAny from './any';\nimport OKArray from './array';\nimport OKBoolean from './boolean';\nimport OKNumber from './number';\nimport OKObject, { Shape } from './object';\nimport OKString from './string';\n\nconst ok = {\n  any: <Input = any, Parent = any, Root = any>() =>\n    new OKAny<Input, Parent, Root>(),\n  array: <Input = any, Parent = any, Root = any>(shape: OKAny, msg?: string) =>\n    new OKArray<Input, Parent, Root>(shape, msg),\n  boolean: <Input = any, Parent = any, Root = any>(msg?: string) =>\n    new OKBoolean<Input, Parent, Root>(msg),\n  number: <Input = any, Parent = any, Root = any>(msg?: string) =>\n    new OKNumber<Input, Parent, Root>(msg),\n  object: <Input = any, Parent = any, Root = any>(\n    shape: Shape<Input>,\n    msg?: string\n  ) => new OKObject<Input, Parent, Root>(shape, msg),\n  string: <Input = any, Parent = any, Root = any>(msg?: string) =>\n    new OKString<Input, Parent, Root>(msg),\n};\n\nexport default ok;\n","import OKAny from './any';\n\n// from emailregex.com\nconst emailRegex = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n\nconst parseString = (val: unknown) => {\n  if (val === null || val === undefined) return val;\n  else if (typeof val === 'string') return val;\n  else if (typeof val === 'object') return val;\n  else return String(val);\n};\n\nclass OKString<Input, Parent, Root> extends OKAny<Input, Parent, Root> {\n  public constructor(msg?: string) {\n    super();\n    this.transform(parseString);\n    this.addTest(v => typeof v === 'string', msg || 'Must be a string');\n  }\n\n  public length(len: number, msg?: string) {\n    this.addTest(v => v.length === len, msg || `Must have length ${len}`);\n    return this;\n  }\n\n  public min(min: number, msg?: string) {\n    this.addTest(\n      v => v.length >= min,\n      msg || `Must have length greater than or equal to ${min}`\n    );\n    return this;\n  }\n\n  public max(max: number, msg?: string) {\n    this.addTest(\n      v => v.length <= max,\n      msg || `Must have length less than or equal to ${max}`\n    );\n    return this;\n  }\n\n  public matches(regex: RegExp, msg?: string) {\n    this.addTest(\n      v => regex.test(v),\n      msg || `Must match regular expression: ${regex.toString()}`\n    );\n    return this;\n  }\n\n  public email(msg?: string) {\n    this.addTest(v => emailRegex.test(v), msg || `Must be an email address`);\n    return this;\n  }\n\n  private addTest = this.makeAddTest<string>();\n}\n\nexport default OKString;\n"]}