{"version":3,"sources":["../src/any.ts","../src/array.ts","../src/boolean.ts","../src/errors.ts","../src/index.ts","../src/number.ts","../src/object.ts","../src/ok.ts","../src/string.ts"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["import { ValidationRuntimeError } from './errors';\n\nexport interface ValidationErrorObject {\n  [key: string]: ValidationError;\n}\n\nexport type ValidationError = string | ValidationErrorObject;\n\ninterface ResultValid {\n  valid: true;\n  error: null;\n  validationError: null;\n}\n\ninterface ResultInvalidBase {\n  valid: false;\n  validationError: ValidationRuntimeError;\n}\n\ninterface ResultInvalidPrimitive extends ResultInvalidBase {\n  error: string;\n}\n\ninterface ResultInvalidObject extends ResultInvalidBase {\n  error: ValidationErrorObject;\n}\n\ntype ResultInvalid = ResultInvalidPrimitive | ResultInvalidObject;\n\nexport type Result = ResultValid | ResultInvalid;\n\ninterface TestContext<Parent, Root> {\n  parent: Parent;\n  root: Root;\n  path: string[];\n}\n\ntype TestFn<Input, Parent, Root> = (\n  val: Input,\n  context: TestContext<Parent, Root>\n) => OKAny | string | false | null | undefined | void;\n\ninterface Test<Input, Parent, Root> {\n  testFn: TestFn<Input, Parent, Root>;\n  skipIfNull?: boolean;\n}\n\nexport type TransformFn<Input, Parent, Root> = (\n  val: Input,\n  context: TestContext<Parent, Root>\n) => any;\n\nfunction checkNullish(value: unknown) {\n  // null, undefined, empty string all considered nullish\n  return value === null || value === undefined || (value as string) === '';\n}\n\nclass OKAny<Input = unknown, Parent = unknown, Root = unknown> {\n  /* Instance keeping track of stuff */\n  private isNullable = false;\n  private requiredMessage = 'Required';\n\n  protected tests: Test<Input, Parent, Root>[] = [];\n\n  protected transforms: TransformFn<Input, Parent, Root>[] = [];\n\n  // @internal\n  public __parent: Parent | undefined;\n  // @internal\n  public __root: Root | undefined;\n  // @internal\n  public __path: string[] = [];\n\n  // No validation message, because any excepts anything!\n  public constructor() {}\n\n  /* Internal */\n\n  protected error(\n    msg: string,\n    validationError?: ValidationRuntimeError\n  ): ResultInvalidPrimitive;\n  protected error(\n    msg: ValidationErrorObject,\n    validationError?: ValidationRuntimeError\n  ): ResultInvalidObject;\n  protected error(\n    msg: (string | null)[],\n    validationError?: ValidationRuntimeError\n  ): ResultInvalidObject;\n  protected error(\n    msg: (ValidationErrorObject | null)[],\n    validationError?: ValidationRuntimeError\n  ): ResultInvalidObject;\n  protected error(\n    msg:\n      | string\n      | ValidationErrorObject\n      | (string | null)[]\n      | (ValidationErrorObject | null)[],\n    validationError?: ValidationRuntimeError\n  ) {\n    return {\n      valid: false,\n      error: msg,\n      validationError: validationError || null,\n    };\n  }\n\n  protected success(): ResultValid {\n    return { valid: true, error: null, validationError: null };\n  }\n\n  protected getContext(): TestContext<Parent, Root> {\n    const parent = this.__parent as Parent;\n    const root = this.__root as Root;\n    const path = this.__path;\n    return { parent, root, path };\n  }\n\n  // If the predicate returns true, the test passes, and the value is ok\n  // if it returns false, the error message will be returned\n  // These tests will be skipped if the value is null and field is marked\n  // nullable, because it doesn't make sense to apply them to a null value\n  protected makeAddTest = <T = unknown>() => (\n    predicate: (v: T) => boolean,\n    msg: string\n  ) => {\n    const testFn = (val: Input) => (predicate(val as any) ? null : msg);\n    this.tests.push({ testFn, skipIfNull: true });\n  };\n\n  /**\n   * Build schema\n   */\n\n  public nullable() {\n    this.isNullable = true;\n    return this;\n  }\n\n  public transform(transformFn: TransformFn<Input, Parent, Root>) {\n    this.transforms.push(transformFn);\n    return this;\n  }\n\n  public test(testFn: TestFn<Input, Parent, Root>): OKAny<Input, Parent, Root> {\n    this.tests.push({ testFn });\n    return this;\n  }\n\n  /**\n   * @param msg Error message if field is empty (empty string, null, undefined)\n   */\n  public required(msg?: string) {\n    if (msg) {\n      this.requiredMessage = msg;\n    }\n    return this;\n  }\n\n  /**\n   * Call after schema is defined\n   */\n\n  public cast(input: Input) {\n    const context = this.getContext();\n    return this.transforms.reduce(\n      (prevValue, fn) => fn(prevValue, context),\n      input\n    );\n  }\n\n  public validate(input: Input): Result {\n    try {\n      const value = this.cast(input);\n\n      const isNullish = checkNullish(value);\n      if (isNullish && !this.isNullable) {\n        return this.error(this.requiredMessage);\n      }\n\n      const context = this.getContext();\n      for (const { testFn, skipIfNull } of this.tests) {\n        if (isNullish && skipIfNull) {\n          continue;\n        }\n        const res = testFn(value, context);\n        if (res instanceof OKAny) return res.validate(value);\n        else if (typeof res === 'string') return this.error(res);\n      }\n\n      return this.success();\n    } catch (err) {\n      // An error thrown by use (ex: impossible cast request)\n      if (err instanceof ValidationRuntimeError) {\n        return this.error(err.message, err);\n      } else {\n        // Unknown error\n        const runtimeError = new ValidationRuntimeError({\n          message: err.message,\n          originalError: err,\n        });\n        return this.error('Invalid', runtimeError);\n      }\n    }\n  }\n}\n\nexport default OKAny;\n","import OKAny, { Result } from './any';\nimport { ValidationRuntimeError } from './errors';\n\nclass OKArray<Input, Parent, Root> extends OKAny<Input, Parent, Root> {\n  private shape: OKAny;\n  private parseErrorMsg = 'Must be an array';\n\n  public constructor(shape: OKAny, msg?: string) {\n    super();\n    this.shape = shape;\n    if (msg) this.parseErrorMsg = msg;\n    this.addTest(v => Array.isArray(v), this.parseErrorMsg);\n  }\n\n  private addTest = this.makeAddTest<unknown[]>();\n\n  private setContext(input: Input, ndx: number) {\n    // If input in null return immediately\n    if (!input) return;\n    this.shape.__parent = (input as unknown) as Parent;\n    // If this already has a root, pass in that one\n    this.shape.__root = this.__root || ((input as unknown) as Root);\n    this.shape.__path = this.__path.concat(String(ndx));\n  }\n\n  /* Call after schema is defined */\n\n  public validate(input: Input): Result {\n    // Generic validation\n    const superRes = super.validate(input);\n    if (!superRes.valid) return superRes;\n\n    const errors = ((input as unknown) as any[]).map((el, ndx) => {\n      this.setContext(input, ndx);\n      return this.shape.validate(el);\n    });\n\n    const foundError = errors.some(e => !e.valid);\n    // typescript cannot comprehend that they are all of the same type\n    if (foundError) return this.error(errors.map(e => e.error) as any[]);\n\n    return this.success();\n  }\n\n  // Override cast behavior so that all elements get cast\n  public cast(input: Input) {\n    // If we are trying to cast something that is not an array give up\n    if (!Array.isArray(input)) {\n      throw new ValidationRuntimeError({\n        message: this.parseErrorMsg,\n        originalError: new Error(`Cannot cast ${typeof input} to array`),\n      });\n    }\n    return (input.map(el => this.shape.cast(el)) as unknown) as Input;\n  }\n}\n\nexport default OKArray;\n","import OKAny from './any';\n\nconst parseBoolean = (val: unknown) => {\n  if (typeof val === 'string') {\n    // For strings, any string of spaces is considered empty\n    const isEmpty = val.trim() === '';\n    if (isEmpty) return null;\n    // If it isn't empty, check if it is the string true or false\n    else if (val === 'true') return true;\n    else if (val === 'false') return false;\n    else return val;\n  }\n  // Everything else is returned directly\n  return val;\n};\n\nclass OKBoolean<Input, Parent, Root> extends OKAny<Input, Parent, Root> {\n  public constructor(msg?: string) {\n    super();\n    this.transform(parseBoolean);\n    this.addTest(v => typeof v === 'boolean', msg || 'Must be a boolean');\n  }\n\n  private addTest = this.makeAddTest<boolean>();\n}\n\nexport default OKBoolean;\n","interface ValidationRuntimeErrorParams {\n  message: string;\n  originalError: Error;\n}\n\nexport class ValidationRuntimeError extends Error {\n  public originalError: Error;\n\n  public constructor(params: ValidationRuntimeErrorParams) {\n    super();\n    this.message = params.message;\n    this.originalError = params.originalError;\n  }\n}\n","import ok from './ok';\n\nexport default ok;\n","import OKAny, { TransformFn } from './any';\n\nconst parseNumber = (val: unknown) => {\n  if (typeof val === 'string') {\n    // For strings, any string of spaces is considered empty\n    const isEmpty = val.trim() === '';\n    if (isEmpty) return null;\n    // If it isn't empty, it is parsed with Number\n    else return Number(val);\n  }\n  // Numbers, null, undefined are returned directly\n  if (typeof val === 'number' || val === null || val === undefined) return val;\n  // Everything else is considered not a number\n  return NaN;\n};\n\nclass OKNumber<Input, Parent, Root> extends OKAny<Input, Parent, Root> {\n  public constructor(msg?: string) {\n    super();\n    this.transform(parseNumber);\n    this.addTest(\n      v => typeof v === 'number' && !Number.isNaN(v),\n      msg || 'Must be a number'\n    );\n  }\n\n  private addTest = this.makeAddTest<number>();\n\n  public min(min: number, msg?: string) {\n    this.addTest(\n      v => v >= min,\n      msg || `Must be greater than or equal to ${min}`\n    );\n    return this;\n  }\n\n  public max(max: number, msg?: string) {\n    this.addTest(v => v <= max, msg || `Must be less than or equal to ${max}`);\n    return this;\n  }\n\n  public integer(msg?: string) {\n    this.addTest(v => Number.isInteger(v), msg || 'Must be an integer');\n    return this;\n  }\n\n  public transform(transformFn: TransformFn<Input, Parent, Root>) {\n    this.transforms.push(transformFn);\n    return this;\n  }\n}\n\nexport default OKNumber;\n","import OKAny, { ValidationError, Result } from './any';\nimport { ValidationRuntimeError } from './errors';\n\nexport interface Shape<Input> {\n  [key: string]: OKAny<Input>;\n}\n\ninterface UnknownObj {\n  [key: string]: unknown;\n}\n\nfunction isObject(v: unknown) {\n  return typeof v === 'object' && v !== null && !Array.isArray(v);\n}\n\nclass OKObject<Input, Parent, Root> extends OKAny<Input, Parent, Root> {\n  private shape: Shape<Input>;\n  private parseErrorMsg = 'Must be an object';\n\n  public constructor(shape: Shape<Input>, msg?: string) {\n    super();\n    this.shape = shape;\n    if (msg) this.parseErrorMsg = msg;\n    this.addTest(isObject, this.parseErrorMsg);\n  }\n\n  private addTest = this.makeAddTest<{}>();\n\n  // Returns list of shape, with child OK's populated with parent + root\n  private iterateShape(input: Input) {\n    // If input in null return immediately\n    if (!input) return [];\n    return Object.entries(this.shape).map(([key, ok]) => {\n      const val: any = (input as UnknownObj)[key];\n      return { ok, val, key };\n    });\n  }\n\n  private setContext(input: Input) {\n    // If input in null return immediately\n    if (!input) return;\n    Object.entries(this.shape).forEach(([key, ok]) => {\n      ok.__parent = (input as unknown) as Parent;\n      // If this already has a root, pass in that one\n      ok.__root = this.__root || ((input as unknown) as Root);\n      ok.__path = this.__path.concat(key);\n    });\n  }\n\n  /* Call after schema is defined */\n\n  public validate(input: Input): Result {\n    this.setContext(input);\n\n    // Generic validation\n    const superRes = super.validate(input);\n    if (!superRes.valid) return superRes;\n\n    // Each key\n    let foundError = false;\n    const error: ValidationError = {};\n    for (const { ok, val, key } of this.iterateShape(input)) {\n      const res = ok.validate(val);\n      if (!res.valid) {\n        foundError = true;\n        error[key] = res.error;\n      }\n    }\n\n    if (foundError) return this.error(error);\n\n    return this.success();\n  }\n\n  // Override cast behavior so that children get cast\n  public cast(input: Input) {\n    // If we are trying to cast something that is not an object give up\n    if (!isObject(input)) {\n      throw new ValidationRuntimeError({\n        message: this.parseErrorMsg,\n        originalError: new Error(`Cannot cast ${typeof input} to object`),\n      });\n    }\n    const newInput: UnknownObj = {};\n    for (const { ok, val, key } of this.iterateShape(input)) {\n      newInput[key] = ok.cast(val);\n    }\n    const context = this.getContext();\n    return this.transforms.reduce(\n      (prevValue, fn) => fn(prevValue, context),\n      newInput as Input\n    );\n  }\n}\n\nexport default OKObject;\n","import OKAny from './any';\nimport OKArray from './array';\nimport OKBoolean from './boolean';\nimport OKNumber from './number';\nimport OKObject, { Shape } from './object';\nimport OKString from './string';\n\nconst ok = {\n  any: <Input = any, Parent = any, Root = any>() =>\n    new OKAny<Input, Parent, Root>(),\n  array: <Input = any, Parent = any, Root = any>(shape: OKAny, msg?: string) =>\n    new OKArray<Input, Parent, Root>(shape, msg),\n  boolean: <Input = any, Parent = any, Root = any>(msg?: string) =>\n    new OKBoolean<Input, Parent, Root>(msg),\n  number: <Input = any, Parent = any, Root = any>(msg?: string) =>\n    new OKNumber<Input, Parent, Root>(msg),\n  object: <Input = any, Parent = any, Root = any>(\n    shape: Shape<Input>,\n    msg?: string\n  ) => new OKObject<Input, Parent, Root>(shape, msg),\n  string: <Input = any, Parent = any, Root = any>(msg?: string) =>\n    new OKString<Input, Parent, Root>(msg),\n};\n\nexport default ok;\n","// import { isEmail, isURL } from 'validator';\n\nconst isEmail = (str: string) => true;\nconst isURL = (str: string) => true;\n\nimport OKAny from './any';\n\nconst parseString = (val: unknown) => {\n  if (val === null || val === undefined) return val;\n  else if (typeof val === 'string') return val;\n  else if (typeof val === 'object') return val;\n  else return String(val);\n};\n\nclass OKString<Input, Parent, Root> extends OKAny<Input, Parent, Root> {\n  public constructor(msg?: string) {\n    super();\n    this.transform(parseString);\n    this.addTest(v => typeof v === 'string', msg || 'Must be a string');\n  }\n\n  public length(len: number, msg?: string) {\n    this.addTest(v => v.length === len, msg || `Must have length ${len}`);\n    return this;\n  }\n\n  public min(min: number, msg?: string) {\n    this.addTest(\n      v => v.length >= min,\n      msg || `Must have length greater than or equal to ${min}`\n    );\n    return this;\n  }\n\n  public max(max: number, msg?: string) {\n    this.addTest(\n      v => v.length <= max,\n      msg || `Must have length less than or equal to ${max}`\n    );\n    return this;\n  }\n\n  public matches(regex: RegExp, msg?: string) {\n    this.addTest(\n      v => regex.test(v),\n      msg || `Must match regular expression: ${regex.toString()}`\n    );\n    return this;\n  }\n\n  public email(msg?: string) {\n    this.addTest(v => isEmail(v), msg || `Must be an email address`);\n    return this;\n  }\n\n  public url(msg?: string) {\n    this.addTest(v => isURL(v), msg || `Must be a url`);\n    return this;\n  }\n\n  private addTest = this.makeAddTest<string>();\n}\n\nexport default OKString;\n"]}